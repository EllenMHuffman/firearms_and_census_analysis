{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Firearm Background Checks by Demographics\n",
    "\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "The Federal Bureau of Investigation (FBI) maintains a database of individuals who are ineligible to purchase a firearm. This database, called the National Instant Criminal Background Check System (NICS), allows firearm merchants to verify whether a customer is elible to purchase firearms. The laws requiring these checks vary state-to-state. The FBI publishes their data on the number of firearm checks by month, state, and type. The data included in this analysis covers November 1998 through November 2017.\n",
    "\n",
    "Although this published data from the FBI is widely accepted as the best proxy for gun ownership, it is important to note its narrow scope. The data references the number of database checks that occurred, not the number of gun purchases, nor does it include any data from private gun sales. Not every NICS check leads to a completed purchase, and according to a Harvard study, roughly 40% of gun owners acquired their most recent firearm without undergoing a background check at all. \n",
    "\n",
    "This analysis also features data from the U.S. Census at the state level, and all of the data points are from 2010 or 2016, unless otherwise noted.\n",
    "\n",
    "By combining the NICS data with the U.S. Census data, I plan to investigate the following questions:\n",
    "- Which states have had the highest and lowest growth in gun checks from 2010 to 2016? \n",
    "- Which population group (minors, senior citizens, or women) is associated with lower or higher growth of NICS checks?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling\n",
    "\n",
    "\n",
    "### General Properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "gun\n",
      "\n",
      "Header:      month    state   permit  permit_recheck  handgun  long_gun  other  \\\n",
      "0  2017-09  Alabama  16717.0             0.0   5734.0    6320.0  221.0   \n",
      "\n",
      "   multiple  admin  prepawn_handgun   ...    returned_other  rentals_handgun  \\\n",
      "0       317    0.0             15.0   ...               0.0              0.0   \n",
      "\n",
      "   rentals_long_gun  private_sale_handgun  private_sale_long_gun  \\\n",
      "0               0.0                   9.0                   16.0   \n",
      "\n",
      "   private_sale_other  return_to_seller_handgun  return_to_seller_long_gun  \\\n",
      "0                 3.0                       0.0                        0.0   \n",
      "\n",
      "   return_to_seller_other  totals  \n",
      "0                     3.0   32019  \n",
      "\n",
      "[1 rows x 27 columns]\n",
      "\n",
      "Shape: (12485, 27)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12485 entries, 0 to 12484\n",
      "Data columns (total 27 columns):\n",
      "month                        12485 non-null object\n",
      "state                        12485 non-null object\n",
      "permit                       12461 non-null float64\n",
      "permit_recheck               1100 non-null float64\n",
      "handgun                      12465 non-null float64\n",
      "long_gun                     12466 non-null float64\n",
      "other                        5500 non-null float64\n",
      "multiple                     12485 non-null int64\n",
      "admin                        12462 non-null float64\n",
      "prepawn_handgun              10542 non-null float64\n",
      "prepawn_long_gun             10540 non-null float64\n",
      "prepawn_other                5115 non-null float64\n",
      "redemption_handgun           10545 non-null float64\n",
      "redemption_long_gun          10544 non-null float64\n",
      "redemption_other             5115 non-null float64\n",
      "returned_handgun             2200 non-null float64\n",
      "returned_long_gun            2145 non-null float64\n",
      "returned_other               1815 non-null float64\n",
      "rentals_handgun              990 non-null float64\n",
      "rentals_long_gun             825 non-null float64\n",
      "private_sale_handgun         2750 non-null float64\n",
      "private_sale_long_gun        2750 non-null float64\n",
      "private_sale_other           2750 non-null float64\n",
      "return_to_seller_handgun     2475 non-null float64\n",
      "return_to_seller_long_gun    2750 non-null float64\n",
      "return_to_seller_other       2255 non-null float64\n",
      "totals                       12485 non-null int64\n",
      "dtypes: float64(23), int64(2), object(2)\n",
      "memory usage: 2.6+ MB\n",
      "\n",
      "Info: None\n",
      "\n",
      "Duplicates: 0\n",
      "\n",
      "\n",
      "census\n",
      "\n",
      "Header:                                            Fact Fact Note    Alabama   Alaska  \\\n",
      "0  Population estimates, July 1, 2016,  (V2016)       NaN  4,863,300  741,894   \n",
      "\n",
      "     Arizona   Arkansas  California   Colorado Connecticut Delaware   ...     \\\n",
      "0  6,931,071  2,988,248  39,250,017  5,540,545   3,576,452  952,065   ...      \n",
      "\n",
      "  South Dakota Tennessee       Texas       Utah  Vermont   Virginia  \\\n",
      "0       865454   6651194  27,862,596  3,051,217  624,594  8,411,808   \n",
      "\n",
      "  Washington West Virginia  Wisconsin  Wyoming  \n",
      "0  7,288,000     1,831,102  5,778,708  585,501  \n",
      "\n",
      "[1 rows x 52 columns]\n",
      "\n",
      "Shape: (65, 52)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 65 entries, 0 to 64\n",
      "Data columns (total 52 columns):\n",
      "Fact              65 non-null object\n",
      "Fact Note         16 non-null object\n",
      "Alabama           65 non-null object\n",
      "Alaska            65 non-null object\n",
      "Arizona           65 non-null object\n",
      "Arkansas          65 non-null object\n",
      "California        65 non-null object\n",
      "Colorado          65 non-null object\n",
      "Connecticut       65 non-null object\n",
      "Delaware          65 non-null object\n",
      "Florida           65 non-null object\n",
      "Georgia           65 non-null object\n",
      "Hawaii            65 non-null object\n",
      "Idaho             65 non-null object\n",
      "Illinois          65 non-null object\n",
      "Indiana           65 non-null object\n",
      "Iowa              65 non-null object\n",
      "Kansas            65 non-null object\n",
      "Kentucky          65 non-null object\n",
      "Louisiana         65 non-null object\n",
      "Maine             65 non-null object\n",
      "Maryland          65 non-null object\n",
      "Massachusetts     65 non-null object\n",
      "Michigan          65 non-null object\n",
      "Minnesota         65 non-null object\n",
      "Mississippi       65 non-null object\n",
      "Missouri          65 non-null object\n",
      "Montana           65 non-null object\n",
      "Nebraska          65 non-null object\n",
      "Nevada            65 non-null object\n",
      "New Hampshire     65 non-null object\n",
      "New Jersey        65 non-null object\n",
      "New Mexico        65 non-null object\n",
      "New York          65 non-null object\n",
      "North Carolina    65 non-null object\n",
      "North Dakota      65 non-null object\n",
      "Ohio              65 non-null object\n",
      "Oklahoma          65 non-null object\n",
      "Oregon            65 non-null object\n",
      "Pennsylvania      65 non-null object\n",
      "Rhode Island      65 non-null object\n",
      "South Carolina    65 non-null object\n",
      "South Dakota      65 non-null object\n",
      "Tennessee         65 non-null object\n",
      "Texas             65 non-null object\n",
      "Utah              65 non-null object\n",
      "Vermont           65 non-null object\n",
      "Virginia          65 non-null object\n",
      "Washington        65 non-null object\n",
      "West Virginia     65 non-null object\n",
      "Wisconsin         65 non-null object\n",
      "Wyoming           65 non-null object\n",
      "dtypes: object(52)\n",
      "memory usage: 26.5+ KB\n",
      "\n",
      "Info: None\n",
      "\n",
      "Duplicates: 0\n",
      "\n",
      "0          Population estimates, July 1, 2016,  (V2016)\n",
      "1     Population estimates base, April 1, 2010,  (V2...\n",
      "2     Population, percent change - April 1, 2010 (es...\n",
      "3                     Population, Census, April 1, 2010\n",
      "4     Persons under 5 years, percent, July 1, 2016, ...\n",
      "5         Persons under 5 years, percent, April 1, 2010\n",
      "6     Persons under 18 years, percent, July 1, 2016,...\n",
      "7        Persons under 18 years, percent, April 1, 2010\n",
      "8     Persons 65 years and over, percent,  July 1, 2...\n",
      "9     Persons 65 years and over, percent, April 1, 2010\n",
      "10     Female persons, percent,  July 1, 2016,  (V2016)\n",
      "11               Female persons, percent, April 1, 2010\n",
      "12         White alone, percent, July 1, 2016,  (V2016)\n",
      "13    Black or African American alone, percent, July...\n",
      "14    American Indian and Alaska Native alone, perce...\n",
      "15         Asian alone, percent, July 1, 2016,  (V2016)\n",
      "16    Native Hawaiian and Other Pacific Islander alo...\n",
      "17    Two or More Races, percent, July 1, 2016,  (V2...\n",
      "18    Hispanic or Latino, percent, July 1, 2016,  (V...\n",
      "19    White alone, not Hispanic or Latino, percent, ...\n",
      "20                                  Veterans, 2011-2015\n",
      "21             Foreign born persons, percent, 2011-2015\n",
      "22               Housing units,  July 1, 2016,  (V2016)\n",
      "23                         Housing units, April 1, 2010\n",
      "24          Owner-occupied housing unit rate, 2011-2015\n",
      "25    Median value of owner-occupied housing units, ...\n",
      "26    Median selected monthly owner costs -with a mo...\n",
      "27    Median selected monthly owner costs -without a...\n",
      "28                         Median gross rent, 2011-2015\n",
      "29                               Building permits, 2016\n",
      "                            ...                        \n",
      "35    Bachelor's degree or higher, percent of person...\n",
      "36    With a disability, under age 65 years, percent...\n",
      "37    Persons  without health insurance, under age 6...\n",
      "38    In civilian labor force, total, percent of pop...\n",
      "39    In civilian labor force, female, percent of po...\n",
      "40    Total accommodation and food services sales, 2...\n",
      "41    Total health care and social assistance receip...\n",
      "42         Total manufacturers shipments, 2012 ($1,000)\n",
      "43       Total merchant wholesaler sales, 2012 ($1,000)\n",
      "44                    Total retail sales, 2012 ($1,000)\n",
      "45                  Total retail sales per capita, 2012\n",
      "46    Mean travel time to work (minutes), workers ag...\n",
      "47    Median household income (in 2015 dollars), 201...\n",
      "48    Per capita income in past 12 months (in 2015 d...\n",
      "49                          Persons in poverty, percent\n",
      "50                  Total employer establishments, 2015\n",
      "51                               Total employment, 2015\n",
      "52                  Total annual payroll, 2015 ($1,000)\n",
      "53          Total employment, percent change, 2014-2015\n",
      "54               Total nonemployer establishments, 2015\n",
      "55                                      All firms, 2012\n",
      "56                                Men-owned firms, 2012\n",
      "57                              Women-owned firms, 2012\n",
      "58                           Minority-owned firms, 2012\n",
      "59                        Nonminority-owned firms, 2012\n",
      "60                            Veteran-owned firms, 2012\n",
      "61                         Nonveteran-owned firms, 2012\n",
      "62                     Population per square mile, 2010\n",
      "63                      Land area in square miles, 2010\n",
      "64                                            FIPS Code\n",
      "Name: Fact, Length: 65, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Load data and examine characteristics, including data that will need to be cleaned. \n",
    "def print_first_line(filename):\n",
    "    name = filename.split('_')[0].split('/')[2]\n",
    "    print('\\n{}'.format(name))\n",
    "    \n",
    "    df = pd.read_csv(filename)\n",
    "    print('\\nHeader: {}'.format(df.head(1)))\n",
    "    print('\\nShape: {}'.format(df.shape))\n",
    "    print('\\nInfo: {}'.format(df.info()))\n",
    "    print('\\nDuplicates: {}\\n'.format(sum(df.duplicated())))\n",
    "    if name == 'census':\n",
    "        print(df.iloc[:,0])\n",
    "\n",
    "data_files = ['./data/gun_data.csv',\n",
    "              './data/census_data.csv']\n",
    "\n",
    "for file in data_files:\n",
    "    print_first_line(file)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleaning\n",
    "In the NICS dataset, I'm limiting the data to specific columns: month and state to track check requests over time, and handgun, long gun, other, and multiple gun check requests. I excluded information for permits because differing state laws regarding concealed-carry permits makes the data inconsistent. I also excluded information for prepawns, redemptions, returns, rentals, and private sales to focus analysis on initial background checks for the purchase of firearms at approved licensee vendors. Additionally, I removed data related to U.S. territories since data from those areas is not included in the Census data. To clean the data, I created separate columns for the year and month of the check requests, changed the state names to lowercase with no spaces, and changed the appropriate data types to integers.\n",
    "\n",
    "In the U.S. Census dataset, I transposed the data so states align with the rows of the NICS dataset. I excluded many of the data columns and renamed the remaining columns to focus on the overall population change, the under 18 population change, and the gender ratio change from 2010 to 2016. I also changed the state names to lowercase and removed the spaces, and I removed all percent signs and commas from the data. Finally, I changed the data types from strings to integers or floats where appropriate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import NICS data into a datframe\n",
    "df_gun = pd.read_csv('./data/gun_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop unwanted columns\n",
    "drop_cols = np.r_[2,3,8:27]\n",
    "drop_gun_col = list(df_gun.columns[drop_cols])\n",
    "df_gun.drop(drop_gun_col, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean state names\n",
    "df_gun['state'] = df_gun['state'].str.lower()\n",
    "df_gun.replace(' ','_', inplace=True, regex=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove unwanted rows\n",
    "drop_rows = ['mariana_islands','district_of_columbia','guam','puerto_rico','virgin_islands']\n",
    "for row in drop_rows:\n",
    "    df_gun = df_gun[df_gun['state']!= row]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split 'month' column into 'year' and 'month'\n",
    "df_gun['year'] = df_gun['month'].apply((lambda x: x.split('-')[0]))\n",
    "df_gun['month'] = df_gun['month'].apply((lambda x: x.split('-')[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change time columns to integers\n",
    "convert_col = ['year','month']\n",
    "for col in convert_col:\n",
    "    df_gun[col] = df_gun[col].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>state</th>\n",
       "      <th>handgun</th>\n",
       "      <th>long_gun</th>\n",
       "      <th>other</th>\n",
       "      <th>multiple</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>alabama</td>\n",
       "      <td>5734.0</td>\n",
       "      <td>6320.0</td>\n",
       "      <td>221.0</td>\n",
       "      <td>317</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>alaska</td>\n",
       "      <td>2320.0</td>\n",
       "      <td>2930.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>160</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>arizona</td>\n",
       "      <td>11063.0</td>\n",
       "      <td>7946.0</td>\n",
       "      <td>920.0</td>\n",
       "      <td>631</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>arkansas</td>\n",
       "      <td>4347.0</td>\n",
       "      <td>6063.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>366</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>california</td>\n",
       "      <td>37165.0</td>\n",
       "      <td>24581.0</td>\n",
       "      <td>2984.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   month       state  handgun  long_gun   other  multiple  year\n",
       "0      9     alabama   5734.0    6320.0   221.0       317  2017\n",
       "1      9      alaska   2320.0    2930.0   219.0       160  2017\n",
       "2      9     arizona  11063.0    7946.0   920.0       631  2017\n",
       "3      9    arkansas   4347.0    6063.0   165.0       366  2017\n",
       "4      9  california  37165.0   24581.0  2984.0         0  2017"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_gun.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import census data as dataframe and transpose\n",
    "df_census = pd.read_csv('./data/census_data.csv', index_col='Fact')\n",
    "df_census = df_census.transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop unwanted columns\n",
    "drop_cols = np.r_[3:6,12:65]\n",
    "drop_census_cols = list(df_census.columns[drop_cols])\n",
    "df_census.drop(drop_census_cols, axis=1, inplace=True)\n",
    "df_census.drop('Fact Note', axis=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset table index\n",
    "df_census = df_census.reset_index()\n",
    "df_census.index.names = ['index']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename remaining columns\n",
    "new_names = ['state','pop_est_2016','pop_est_2010','pop_pct_change','<18_pct_2016',\n",
    "             '<18_pct_2010','>=65_pct_2016','>=65_pct_2010','fem_pct_2016','fem_pct_2010']\n",
    "ind = 0\n",
    "for new_name in new_names:\n",
    "    old_name = df_census.columns[ind]\n",
    "    df_census.rename(index=str, columns={old_name:new_name}, inplace=True)\n",
    "    ind += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean state names, remove all percent signs and commas\n",
    "df_census['state'] = df_census['state'].str.lower()\n",
    "df_census.replace([' ','%',','],['_','',''], inplace=True, regex=True)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# change data to appropriate data types\n",
    "int_columns = list(df_census.columns[1:3])\n",
    "for col in int_columns:\n",
    "    df_census[col] = (df_census[col].astype(int))\n",
    "    \n",
    "float_columns = list(df_census.columns[3:10])\n",
    "for col in float_columns:\n",
    "    df_census[col] = (df_census[col].astype(float))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Fact</th>\n",
       "      <th>state</th>\n",
       "      <th>pop_est_2016</th>\n",
       "      <th>pop_est_2010</th>\n",
       "      <th>pop_pct_change</th>\n",
       "      <th>&lt;18_pct_2016</th>\n",
       "      <th>&lt;18_pct_2010</th>\n",
       "      <th>&gt;=65_pct_2016</th>\n",
       "      <th>&gt;=65_pct_2010</th>\n",
       "      <th>fem_pct_2016</th>\n",
       "      <th>fem_pct_2010</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alabama</td>\n",
       "      <td>4863300</td>\n",
       "      <td>4780131</td>\n",
       "      <td>1.7</td>\n",
       "      <td>22.6</td>\n",
       "      <td>23.7</td>\n",
       "      <td>16.1</td>\n",
       "      <td>13.8</td>\n",
       "      <td>51.6</td>\n",
       "      <td>51.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>alaska</td>\n",
       "      <td>741894</td>\n",
       "      <td>710249</td>\n",
       "      <td>4.5</td>\n",
       "      <td>25.2</td>\n",
       "      <td>26.4</td>\n",
       "      <td>10.4</td>\n",
       "      <td>7.7</td>\n",
       "      <td>47.7</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>arizona</td>\n",
       "      <td>6931071</td>\n",
       "      <td>6392301</td>\n",
       "      <td>8.4</td>\n",
       "      <td>23.5</td>\n",
       "      <td>25.5</td>\n",
       "      <td>16.9</td>\n",
       "      <td>13.8</td>\n",
       "      <td>50.3</td>\n",
       "      <td>50.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>arkansas</td>\n",
       "      <td>2988248</td>\n",
       "      <td>2916025</td>\n",
       "      <td>2.5</td>\n",
       "      <td>23.6</td>\n",
       "      <td>24.4</td>\n",
       "      <td>16.3</td>\n",
       "      <td>14.4</td>\n",
       "      <td>50.9</td>\n",
       "      <td>50.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>california</td>\n",
       "      <td>39250017</td>\n",
       "      <td>37254522</td>\n",
       "      <td>5.4</td>\n",
       "      <td>23.2</td>\n",
       "      <td>25.0</td>\n",
       "      <td>13.6</td>\n",
       "      <td>11.4</td>\n",
       "      <td>50.3</td>\n",
       "      <td>50.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Fact        state  pop_est_2016  pop_est_2010  pop_pct_change  <18_pct_2016  \\\n",
       "index                                                                         \n",
       "0         alabama       4863300       4780131             1.7          22.6   \n",
       "1          alaska        741894        710249             4.5          25.2   \n",
       "2         arizona       6931071       6392301             8.4          23.5   \n",
       "3        arkansas       2988248       2916025             2.5          23.6   \n",
       "4      california      39250017      37254522             5.4          23.2   \n",
       "\n",
       "Fact   <18_pct_2010  >=65_pct_2016  >=65_pct_2010  fem_pct_2016  fem_pct_2010  \n",
       "index                                                                          \n",
       "0              23.7           16.1           13.8          51.6          51.5  \n",
       "1              26.4           10.4            7.7          47.7          48.0  \n",
       "2              25.5           16.9           13.8          50.3          50.3  \n",
       "3              24.4           16.3           14.4          50.9          50.9  \n",
       "4              25.0           13.6           11.4          50.3          50.3  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_census.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save dataframes as new csv files to use in analysis\n",
    "df_gun.to_csv('./data/gun_data_cleaned.csv', index=False)\n",
    "df_census.to_csv('./data/census_data_cleaned.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load cleaned data sets\n",
    "df_gun = pd.read_csv('./data/gun_data_cleaned.csv')\n",
    "df_census = pd.read_csv('./data/census_data_cleaned.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Which states have had the highest and lowest growth in gun checks from 2010 to 2016? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the total background checks across all types\n",
    "df_gun['total']= df_gun['handgun']+df_gun['long_gun']+df_gun['other']+df_gun['multiple']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the total gun checks by state for each year\n",
    "df_sums_2016 = df_gun.query('year==2016').groupby(['state'], as_index=False)['total'].sum()\n",
    "df_sums_2010 = df_gun.query('year==2010').groupby(['state'], as_index=False)['total'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate percent change: difference divided by first number * 100\n",
    "index = np.arange(0,50)\n",
    "columns = ['state','pct_change']\n",
    "\n",
    "df_gun_pct_change = pd.DataFrame(index=index, columns=columns)\n",
    "df_gun_pct_change['state'] = df_gun['state'][0:50]\n",
    "df_gun_pct_change['pct_change'] = (df_sums_2016['total']-df_sums_2010['total'])*100/df_sums_2010['total']\n",
    "\n",
    "# Fix null value for Hawaii (should be 0)\n",
    "df_gun_pct_change['pct_change'].fillna(0.0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort table by percent change to find highest and lowest growths of gun checks\n",
    "df_gun_pct_change.sort_values('pct_change', ascending=False, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107e5f5c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107ef5d30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Select top 5 states from percent change table\n",
    "data = df_gun_pct_change['pct_change'][:5]\n",
    "\n",
    "# Create bar graph\n",
    "fig, ax = plt.subplots()\n",
    "ind = list(np.arange(0,5))\n",
    "\n",
    "top_states = df_gun_pct_change['state'][:5]\n",
    "tick_labels = list(top_states)\n",
    "\n",
    "plt.bar(ind, data)\n",
    "ax.set_xticks(ind)\n",
    "ax.set_xticklabels(tick_labels)\n",
    "plt.title('Top 5 States in Growth of NICS Checks')\n",
    "plt.xlabel('States')\n",
    "plt.ylabel('Percent Growth')\n",
    "plt.show();\n",
    "\n",
    "# Select bottom 5 states from percent change table\n",
    "data = df_gun_pct_change['pct_change'][-5:]\n",
    "\n",
    "# Create bar graph\n",
    "fig, ax = plt.subplots()\n",
    "ind = list(np.arange(0,5))\n",
    "\n",
    "bottom_states = df_gun_pct_change['state'][-5:]\n",
    "tick_labels = list(bottom_states)\n",
    "\n",
    "plt.bar(ind, data)\n",
    "ax.set_xticks(ind)\n",
    "ax.set_xticklabels(tick_labels)\n",
    "plt.title('Bottom 5 States in Growth of NICS Checks')\n",
    "plt.xlabel('States')\n",
    "plt.ylabel('Percent Growth')\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The top five states with the greatest increase of NICS checks are Delaware, California, New Jersey, Illinois, and Massachusetts. They all showed more than a 125% increase, and Delaware had nearly a 160% increase in checks across all gun types.\n",
    "\n",
    "The five states with the lowest amount of change were Kansas, Alabama, Hawaii, Nebraska, and Iowa. Kansas showed over 25% increase in checks and Alabama trailed behind with a 10% increase. Hawaii had a rate of change of 0, due to not calling in any requests either year. Nebraska and Iowa actually showed negative growth, or a decrease, around 2% and 6% respectively.\n",
    "\n",
    "### Which population group (minors, senior citizens, or women) is associated with lower or higher growth of NICS checks?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add gun data to the census dataframe, calculate checks per capita\n",
    "df_gun_pct_change.sort_values('state', inplace=True)\n",
    "df_census['gun_pct_chg'] = df_gun_pct_change['pct_change']\n",
    "df_census['ch_per_cap_2016'] = df_sums_2016['total']/df_census['pop_est_2016']\n",
    "df_census['ch_per_cap_2010'] = df_sums_2010['total']/df_census['pop_est_2010']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate percent change for the populations <18, >65, and women, and the percent change in per capita checks\n",
    "df_census['<18_pct_chg'] = (df_census['<18_pct_2016']-df_census['<18_pct_2010'])*100/df_census['<18_pct_2010']\n",
    "df_census['>=65_pct_chg'] = (df_census['>=65_pct_2016']-df_census['>=65_pct_2010'])*100/df_census['>=65_pct_2010']\n",
    "df_census['fem_pct_chg'] = (df_census['fem_pct_2016']-df_census['fem_pct_2010'])*100/df_census['fem_pct_2010']\n",
    "df_census['per_cap_pct_chg'] = (df_census['ch_per_cap_2016']-df_census['ch_per_cap_2010'])*100/df_census['ch_per_cap_2010']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare table for graphing variables of interest\n",
    "df_pct_chg = df_census.copy()\n",
    "cols = np.r_[1,2,4:13]\n",
    "drop_cols = list(df_pct_chg.columns[cols])\n",
    "df_pct_chg.drop(drop_cols, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107540080>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1020ab550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107622e48>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1081d0cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph the four variables against the percent change in checks per capita\n",
    "df_pct_chg.plot(x='pop_pct_change', y='per_cap_pct_chg', kind='scatter', title='Percent Changes in Total Population and NICS Checks Per Capita')\n",
    "df_pct_chg.plot(x='<18_pct_chg', y='per_cap_pct_chg', kind='scatter', title='Percent Changes in <18 Population and NICS Checks Per Capita')\n",
    "df_pct_chg.plot(x='>=65_pct_chg', y='per_cap_pct_chg', kind='scatter', title='Percent Changes in >=65 Population and NICS Checks Per Capita')\n",
    "df_pct_chg.plot(x='fem_pct_chg', y='per_cap_pct_chg', kind='scatter', title='Percent Changes in Female Population and NICS Checks Per Capita');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is no correlation between the percent change of a state's total population and the percent change in NICS checks per capita. There is also no correlation between the percent change in female population, or the >=65 population, and the percent change in NICS checks, although these two populations do have more closely distributed data than the total population. There appears to be a loose, negative correlation between the change in <18 population and per capita NICS checks. \n",
    "\n",
    "<a id='conclusions'></a>\n",
    "## Conclusions\n",
    "\n",
    "Nearly every state showed an increase in the number of NICS checks called in for the purchase of firearms. The top two states, Delaware and California, both had over a 150% increase in the number of checks from 2010 to 2016. Hawaii was unusual in that its growth was 0%; it had 0 checks for both 2010 and 2016. Only two states showed negative growth: Nebraska (~-2%) and Iowa (~-6%). Their negative growth is vastly outweighed by the growth of the 47 other states, revealing a greater trend toward higher NICS usage. \n",
    "\n",
    "The dataset, and thus the analysis, is limited because there is not a one-to-one correspondence of NICS checks to gun purchases; it is impossible to say whether gun sales also increased. Changes in state laws requiring more frequent checks of the NICS database could explain the observed growth even if underlying sales remained stagnant. Conversely, firearm sales from private vendors could be growing much faster than NICS checks convey. There is no way to determine the trend of actual gun sales without more detailed data.\n",
    "\n",
    "When comparing the population changes within each state to the changes in NICS checks per capita, very little association is present. As the total population of the state grows, its inhabitants are neither more nor less likely to trigger an NICS check, and the changing population >=65 years old is also not associated with any change in NICS checks. The ratio of females to males within a state is not associated with any change in per capita NICS checks, either. There does appear to be some negative association between the changing population <18 years old and the per capita NICS checks. The states that had a smaller decrease in the number of people <18 also tended to have smaller increases of NICS checks, while the states that had a large decrease in the <18yo population also tended to have a much larger increase in the number of per capita NICS checks. Many reasons could explain this observation, however, and a more rigorous analyis is required to determine any causation. An area to explore further in future analyses is this relationship between the <18 years old population and the number of NICS checks to determine if a causal relationship can be found. Another area to explore is the legistlation passed within each state about NICS checks to determine if that has any effect on the growth seen in the states."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
